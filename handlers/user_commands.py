from aiogram.filters import CommandStart, Command
from aiogram.filters import or_f
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from keyboards.inline import build_languages_kb
from keyboards.reply import build_admin_menu_kb, build_menu_kb
from constats import DB, INTERESTS

from config import LIST_OF_ADMINS

router = Router()
db = DB

@router.message(or_f(CommandStart(), F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def greeting(message: Message, state: FSMContext):
    languages_kb = await build_languages_kb()
    admin_menu_kb = await build_admin_menu_kb()
    menu_kb = await build_menu_kb()

    user_id = int(message.from_user.id)

    if not await db.user_exists(user_id=user_id):
        await state.update_data({"user_id": user_id, "name": message.from_user.first_name})

        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}! üéâüëã\n\n"
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –º—ã –Ω–∞—á–Ω–µ–º, –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–∏–Ω –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å: üßê\n\n"
            "*–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å –≤ —Å—Ñ–µ—Ä–µ IT?* üíª‚ú®\n\n"
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞ —è –ø—Ä–µ–¥–ª–æ–∂—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º! üöÄüìö",
            reply_markup=languages_kb,
            parse_mode="MARKDOWN"
        )
    else:
        if user_id in LIST_OF_ADMINS:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}! üéâüëã",
                reply_markup=admin_menu_kb
            )
        else:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name}! üéâüëã",
                reply_markup=menu_kb
            )


@router.message(Command("find"))
async def find(message: Message):
    try:
        interest = message.text.split(" ")[1]
        page = 1
        page_size = 1

        if interest in INTERESTS:
            courses, navigation = await db.get_courses_by_interest_paginated(interest=interest, page=page, page_size=page_size)

            if courses:
                message_text = f"–ö—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É '{interest}':\n"
                for course in courses:
                    message_text += f"üìö *{course['name']}*\n[–ü–µ—Ä–µ–π—Ç–∏]({course['url']})\n\n"

                buttons = []
                if navigation.get('has_previous'):
                    buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"find_page:{interest}:{navigation['previous_page']}"))
                if navigation.get('has_next'):
                    buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"find_page:{interest}:{navigation['next_page']}"))

                keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

                await message.answer(message_text, reply_markup=keyboard, parse_mode="MARKDOWN")
            else:
                await message.answer(f"–ö—É—Ä—Å—ã –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É '{interest}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            await message.answer(f"–ò–Ω—Ç–µ—Ä–µ—Å '{interest}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—Å–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("find_page:"))
async def handle_find_pagination(callback_query: CallbackQuery):
    try:
        _, interest, page = callback_query.data.split(":")
        page = int(page)
        page_size = 1

        courses, navigation = await db.get_courses_by_interest_paginated(interest=interest, page=page, page_size=page_size)

        if courses:
            message_text = f"–ö—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É '{interest}':\n"
            for course in courses:
                message_text += f"üìö *{course['name']}*\n[–ü–µ—Ä–µ–π—Ç–∏]({course['url']})\n\n"

            buttons = []
            if navigation.get('has_previous'):
                buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"find_page:{interest}:{navigation['previous_page']}"))
            if navigation.get('has_next'):
                buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"find_page:{interest}:{navigation['next_page']}"))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

            await callback_query.message.edit_text(message_text, reply_markup=keyboard, parse_mode="MARKDOWN")
        else:
            await callback_query.answer("–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
