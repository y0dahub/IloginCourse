from aiogram import F, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from forms.course_form import CourseInfo, CourseDeleteInfo

from keyboards.reply import build_courses_manager_menu, build_menu_kb
from constats import DB, BOT

import re

router = Router()
db = DB
bot = BOT

@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã")
async def view_courses(message: Message):
    user_id = int(message.from_user.id)
    interest = await db.get_user_interests(user_id=user_id)
    page = 1
    page_size = 1


    try:
        courses, navigation = await db.get_courses_by_interest_paginated(interest, page, page_size)

        if courses:
            message_text = "–ö—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É:\n"
            for course in courses:
                message_text += f"üìö *{course['name']}*\n[–ü–µ—Ä–µ–π—Ç–∏]({course['url']})\n\n"

            buttons = []
            if navigation.get('has_previous'):
                buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page:{navigation['previous_page']}"))

            if navigation.get('has_next'):
                buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page:{navigation['next_page']}"))

            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

            await message.answer(message_text, reply_markup=keyboard, parse_mode="MARKDOWN")
        else:
            await message.answer("–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É.")

    except Exception as e:
        raise e


@router.callback_query(lambda c: c.data.startswith("page:"))
async def handle_pagination(callback_query: CallbackQuery):
    page = int(callback_query.data.split(":")[1])
    user_id = int(callback_query.from_user.id)
    interest = await db.get_user_interests(user_id=user_id)
    page_size = 1

    try:
        courses, navigation = await db.get_courses_by_interest_paginated(interest=interest, page=page, page_size=page_size)
        
        if courses:
            message_text = "–ö—É—Ä—Å—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É:\n"
            for course in courses:
                message_text += f"üìö *{course['name']}*\n*{course['description']}*\n\n[–ü–µ—Ä–µ–π—Ç–∏]({course['url']})\n\n"
            
            buttons = []
            if navigation['has_previous']:
                buttons.append(
                    InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page:{navigation['previous_page']}")
                )
            if navigation['has_next']:
                buttons.append(
                    InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page:{navigation['next_page']}")
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

            await callback_query.message.edit_text(message_text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await callback_query.answer("–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –≤–∞—à–µ–º—É –∏–Ω—Ç–µ—Ä–µ—Å—É.")
    except Exception as e:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤.")
        print(f"–û—à–∏–±–∫–∞: {e}")



@router.message(F.text == "–£–ø—Ä–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏")
async def courses_manager(message: Message):
    courses_manager = await build_courses_manager_menu()

    await message.answer("–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏:",
                        reply_markup=courses_manager)
    


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä—Å")
async def course_add(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–≤–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞.")
    await state.set_state(CourseInfo.name)

@router.message(CourseInfo.name)
async def process_course_name(message: Message, state: FSMContext):
    await state.update_data({"name": message.text})
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫—É—Ä—Å–∞ (–∏–Ω—Ç–µ—Ä–µ—Å)")
    await state.set_state(CourseInfo.interest)

@router.message(CourseInfo.interest)
async def process_course_interest(message: Message, state: FSMContext):
    await state.update_data({"interest": message.text})
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ URL")
    await state.set_state(CourseInfo.url)

@router.message(CourseInfo.url)
async def process_course_url(message: Message, state: FSMContext):
    url = message.text.strip()

    url_pattern = re.compile(
        r"^https://[a-zA-Z0-9.-]+(?:\.[a-zA-Z]{2,})?(?:/.*)?$"
    )

    if url_pattern.match(url):
        await state.update_data({"url": url})
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞.")
        await state.set_state(CourseInfo.description)
    else:
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å https:// –∏ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –≤–µ–±-–∞–¥—Ä–µ—Å–æ–º."
        )

@router.message(CourseInfo.description)
async def process_add_course(message: Message, state: FSMContext):
    await state.update_data({"description": message.text})

    data = await state.get_data()

    name = data.get("name")
    interest = data.get("interest")
    url = data.get("url")
    description = data.get("description")

    is_course_exists = await db.course_exists(name=name)

    users_in_interest = await db.get_users_by_interest(interest=interest)

    menu_kb = await build_menu_kb()

    if not is_course_exists:
        await db.add_course(name=name, interest=interest, url=url, description=description)
        await message.answer(f"–£—Å–ø–µ—Ö!\n–ö—É—Ä—Å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω!\n\n",
                             reply_markup=menu_kb)

        for user in users_in_interest:
            user_id = user['id']
            await bot.send_message(user_id, 
                                   f"–ù–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É `{interest}`: *{name}*\n\n[–ü–µ—Ä–µ–π—Ç–∏]({url})",
                                   parse_mode="MARKDOWN")

    else:
        await message.answer("–ù–µ—É–¥–∞—á–∞!\n–ö—É—Ä—Å —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    data.clear()



@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å")
async def course_delete(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏ ID –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    await state.set_state(CourseDeleteInfo.course_id)

@router.message(CourseDeleteInfo.course_id)
async def process_delete_course(message: Message, state: FSMContext):
    await state.update_data({"id": int(message.text)})

    data = await state.get_data()
    
    course_id = data.get("id")
    record_ = await db.get_course_by_id(course_id=course_id)

    name = record_["name"]
    is_course_exists = await db.course_exists(name=name)


    if is_course_exists:
        await db.delete_course(course_id=course_id)
        await message.answer(f"–£—Å–ø–µ—Ö!\n–ö—É—Ä—Å '{name} (id = {course_id})' —É–¥–∞–ª–µ–Ω.\n\n")
    else:
        await message.answer(f"–ù–µ—É–¥–∞—á–∞!\n–ö—É—Ä—Å '{name} (id = {course_id})' –±—ã–ª —É–¥–∞–ª–µ–Ω —Ä–∞–Ω–µ–µ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n")



